// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "index.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_index_2eproto() {
  delete object::default_instance_;
  delete object_array::default_instance_;
  delete object_item::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_index_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_index_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  object::default_instance_ = new object();
  object_array::default_instance_ = new object_array();
  object_item::default_instance_ = new object_item();
  object::default_instance_->InitAsDefaultInstance();
  object_array::default_instance_->InitAsDefaultInstance();
  object_item::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_index_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_index_2eproto_once_);
void protobuf_AddDesc_index_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_index_2eproto_once_,
                 &protobuf_AddDesc_index_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_index_2eproto {
  StaticDescriptorInitializer_index_2eproto() {
    protobuf_AddDesc_index_2eproto();
  }
} static_descriptor_initializer_index_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int object_array::kValFieldNumber;
#endif  // !_MSC_VER

object_array::object_array()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void object_array::InitAsDefaultInstance() {
}

object_array::object_array(const object_array& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void object_array::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

object_array::~object_array() {
  SharedDtor();
}

void object_array::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void object_array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const object_array& object_array::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_index_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_index_2eproto();
#endif
  return *default_instance_;
}

object_array* object_array::default_instance_ = NULL;

object_array* object_array::New() const {
  return new object_array;
}

void object_array::Clear() {
  val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool object_array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 val = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_val())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_val())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void object_array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 val = 1 [packed = true];
  if (this->val_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_val_cached_byte_size_);
  }
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->val(i), output);
  }

}

int object_array::ByteSize() const {
  int total_size = 0;

  // repeated int64 val = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->val_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->val(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _val_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void object_array::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const object_array*>(&from));
}

void object_array::MergeFrom(const object_array& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
}

void object_array::CopyFrom(const object_array& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool object_array::IsInitialized() const {

  return true;
}

void object_array::Swap(object_array* other) {
  if (other != this) {
    val_.Swap(&other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string object_array::GetTypeName() const {
  return "object.array";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int object_item::kArraysFieldNumber;
const int object_item::kKeyFieldNumber;
#endif  // !_MSC_VER

object_item::object_item()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void object_item::InitAsDefaultInstance() {
}

object_item::object_item(const object_item& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void object_item::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

object_item::~object_item() {
  SharedDtor();
}

void object_item::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void object_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const object_item& object_item::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_index_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_index_2eproto();
#endif
  return *default_instance_;
}

object_item* object_item::default_instance_ = NULL;

object_item* object_item::New() const {
  return new object_item;
}

void object_item::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    key_ = GOOGLE_LONGLONG(0);
  }
  arrays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool object_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .object.array arrays = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arrays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrays()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arrays;
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required int64 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void object_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .object.array arrays = 1;
  for (int i = 0; i < this->arrays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->arrays(i), output);
  }

  // required int64 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->key(), output);
  }

}

int object_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int64 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->key());
    }

  }
  // repeated .object.array arrays = 1;
  total_size += 1 * this->arrays_size();
  for (int i = 0; i < this->arrays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrays(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void object_item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const object_item*>(&from));
}

void object_item::MergeFrom(const object_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrays_.MergeFrom(from.arrays_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
}

void object_item::CopyFrom(const object_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool object_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void object_item::Swap(object_item* other) {
  if (other != this) {
    arrays_.Swap(&other->arrays_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string object_item::GetTypeName() const {
  return "object.item";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int object::kItemsFieldNumber;
#endif  // !_MSC_VER

object::object()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void object::InitAsDefaultInstance() {
}

object::object(const object& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void object::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

object::~object() {
  SharedDtor();
}

void object::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const object& object::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_index_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_index_2eproto();
#endif
  return *default_instance_;
}

object* object::default_instance_ = NULL;

object* object::New() const {
  return new object;
}

void object::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .object.item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .object.item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->items(i), output);
  }

}

int object::ByteSize() const {
  int total_size = 0;

  // repeated .object.item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void object::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const object*>(&from));
}

void object::MergeFrom(const object& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
}

void object::CopyFrom(const object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool object::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void object::Swap(object* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string object::GetTypeName() const {
  return "object";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
